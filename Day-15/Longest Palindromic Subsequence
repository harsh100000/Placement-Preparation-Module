int solve(string s, string rev)
    {
        int n = s.length();
        vector<vector<int>> dp(n+1, vector<int>(n+1,0));
        for(int i=n-1; i>=0; i--)
        {
            for(int j=n-1; j>=0; j--)
            {
                int ans=0;
                if(s[i]==rev[j])
                {
                    ans = 1+ dp[i+1][j+1];
                }
                else
                {
                    ans = max(dp[i][j+1], dp[i+1][j]);
                }
                dp[i][j] =ans;
            }
        }
        return dp[0][0];
    }
    
    int longestPalindromeSubseq(string s) {
        string rev=s;
        reverse(rev.begin(), rev.end());
        return solve(s,rev);
    }
