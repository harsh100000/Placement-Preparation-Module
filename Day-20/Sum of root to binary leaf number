class Solution {
public:
    
    int bintodec(string s)
    {
        int power=0;
        int ans=0;
        int i=s.length()-1;
        while(i>=0)
        {
            int x = (s[i]-'0')*pow(2,power);
            ans += x;
            power++;
            i--;
        }
        return ans;
    }
    
    
    void solve(TreeNode* root, vector<string> &ds, string temp)
    {
        if(root==NULL) return;
        if(root->left==NULL and root->right==NULL) ds.push_back(temp);
        if(root->left) solve(root->left, ds, temp+to_string(root->left->val));
        if(root->right) solve(root->right, ds, temp+to_string(root->right->val));
        
        
    }
    
    int sumRootToLeaf(TreeNode* root) {
        vector<string> ds;
        string temp=to_string(root->val);
        solve(root, ds, temp);
        for(auto it:ds) cout<<it<<" ";
        cout<<endl;
        int ans=0;
        for(auto it:ds)
        {
            ans += bintodec(it);
        }
        return ans;
    }
};
