int shortestPath(vector<vector<int>> &grid, pair<int, int> s,
                     pair<int, int> d) {
                         if(s.first==d.first and s.second==d.second) return 0;
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dist(n, vector<int>(m,1e9));
        queue<pair<int, pair<int,int>>> q;
        dist[s.first][s.second] = 0;
        q.push({0,{s.first, s.second}});
        int dr[] = {-1, 0, 1, 0};
        int dc[] = {0,1,0,-1};
        while(!q.empty())
        {
            auto it = q.front();
            q.pop();
            int dis = it.first;
            int r = it.second.first;
            int c = it.second.second;
            
            for(int i=0; i<4; i++)
            {
                int newr = r+dr[i];
                int newc = c+dc[i];
                if(newr>=0 && newr<n && newc>=0 && newc<m && grid[newr][newc]==1 && dis+1<dist[newr][newc])
                {
                    dist[newr][newc] = 1+dis;
                    if(newr==d.first && newc==d.second) return dis+1;
                    q.push({dis+1, {newr,newc}});
                }
            }
        }
        return -1;
    }
