int shortestDistance(int n, int m, vector<vector<int>> a, int x, int y) {
        if(x==0 and y==0) return 0;
         vector<vector<int>> dist(n, vector<int>(m,1e9));
         queue<pair<int, pair<int,int>>> q;
         dist[0][0]=0;
         q.push({0,{0,0}});
         int dr[] = {-1,0,1,0};
         int dc[] = {0,1,0,-1};
         
         while(!q.empty())
         {
             auto it = q.front();
             q.pop();
             int dis = it.first;
             int r = it.second.first;
             int c = it.second.second;
             
             for(int i=0; i<4; i++)
             {
                 int newr = r+dr[i];
                 int newc = c+dc[i];
                 if(newr>=0 and newr<n and newc>=0 and newc<m and a[newr][newc]==1 and dis+1<dist[newr][newc])
                 {
                     dist[newr][newc] = 1+dis;
                     if(newr==x and newc==y) return dis+1;
                     q.push({1+dis,{newr,newc}});
                 }
             }
         }
         return -1;
    }
